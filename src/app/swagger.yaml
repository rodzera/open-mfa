openapi: 3.0.3
info:
  title: open-mfa
  description: developed by github.com/rodzera
  version: 0.0.16
servers:
  - url: /api
paths:
  /database:
    get:
      tags:
        - Healthcheck
      summary: Get the status of Redis database.
      responses:
        200:
          description: Database status response
          content:
            application/json:
              schema:
                type: object
                properties:
                  datetime:
                    type: string
                    description: Current timestamp from Redis
                    example: "2024-11-01 03:36:58"
                  status:
                    type: string
                    description: Redis availability, either 'up' or 'down'
                    example: "up"
                  version:
                    type: string
                    description: Current Redis version
                    example: "7.4.1"
        500:
          description: Database connection error
      security:
        - basic: [ ]
  /server:
    get:
      tags:
        - Healthcheck
      summary: Get the status of Flask server.
      responses:
        200:
          description: Server status response
          content:
            application/json:
              schema:
                type: object
                properties:
                  datetime:
                    type: string
                    description: Current timestamp from Flask server
                    example: "2024-11-01 03:36:58"
                  status:
                    type: string
                    description: Flask server availability, always 'up'
                    example: "up"
                  version:
                    type: string
                    description: Current app version
                    example: "0.0.16"
      security:
        - basic: [ ]
  /otp:
    get:
      tags:
        - OTP
      summary: Generate and verify a One-Time Password (OTP).
      parameters:
        - name: otp
          in: query
          required: false
          description: The OTP to verify (optional).
          schema:
            type: string
      responses:
        200:
          description: OTP generated or verified successfully
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      otp:
                        type: string
                        description: Server side OTP, generated if no OTP is provided for verification
                        example: "123456"
                  - type: object
                    properties:
                      status:
                        type: boolean
                        description: OTP verification result
                        example: true
              examples:
                OTPGeneration:
                  summary: OTP Generation
                  value:
                    otp: "123456"
                OTPVerification:
                  summary: OTP Verification
                  value:
                    status: true
        400:
          description: Invalid OTP provided
        404:
          description: OTP not created
  /hotp:
    get:
      tags:
        - HOTP
      summary: Generate and verify a HMAC-based One-time Password (HOTP).
      parameters:
        - name: otp
          in: query
          required: false
          description: The OTP to verify (optional).
          schema:
            type: string
        - name: initial_count
          in: query
          required: false
          description: HOTP initial creation counter (optional).
          schema:
            type: integer
        - name: resync_threshold
          in: query
          required: false
          description: HOTP resynchronization protocol threshold based on a look-ahead window (optional).
          schema:
            type: integer
      responses:
        200:
          description: HOTP generated or verified successfully
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      uri:
                        type: string
                        description: Provisioning HOTP uri to be used in a authenticator app
                        example: "otpauth://hotp/open-mfa:username?secret=JBSWY3DPEHPK3PXP&issuer=open-mfa&counter=0"
                  - type: object
                    properties:
                      status:
                        type: boolean
                        description: HOTP verification result
                        example: true
              examples:
                HOTPGeneration:
                  summary: HOTP Generation
                  value:
                    uri: "otpauth://hotp/open-mfa:username?secret=JBSWY3DPEHPK3PXP&issuer=open-mfa&counter=0"
                HOTPVerification:
                  summary: HOTP Verification
                  value:
                    status: true
        400:
          description: Invalid OTP provided
        404:
          description: HOTP not created
        409:
          description: HOTP already created
    delete:
      tags:
        - HOTP
      summary: Reset the HMAC-based One-time Password (HOTP).
      responses:
        204:
          description: HOTP reset successfully
        404:
          description: HOTP not created
  /totp:
    get:
      tags:
        - TOTP
      summary: Generate and verify a Time-based One-time Password (TOTP).
      parameters:
        - name: otp
          in: query
          required: false
          description: The OTP to verify (optional).
          schema:
            type: string
        - name: interval
          in: query
          required: false
          description: TOTP interval in seconds (optional).
          schema:
            type: integer
      responses:
        200:
          description: TOTP generated or verified successfully
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      uri:
                        type: string
                        description: Provisioning TOTP uri to be used in a authenticator app
                        example: "otpauth://totp/open-mfa:username?secret=JBSWY3DPEHPK3PXP&issuer=open-mfa"
                  - type: object
                    properties:
                      status:
                        type: boolean
                        description: TOTP verification result
                        example: true
              examples:
                TOTPGeneration:
                  summary: TOTP Generation
                  value:
                    uri: "otpauth://totp/open-mfa:username?secret=JBSWY3DPEHPK3PXP&issuer=open-mfa"
                TOTPVerification:
                  summary: TOTP Verification
                  value:
                    status: true
        400:
          description: Invalid OTP provided
        404:
          description: TOTP not created
        409:
          description: TOTP already created
    delete:
      tags:
        - TOTP
      summary: Reset the Time-based One-time Password (TOTP).
      responses:
        204:
          description: TOTP reset successfully
        404:
          description: TOTP not created
  /logging:
    get:
      tags:
        - Logging
      summary: Retrieve the server logging level.
      responses:
        200:
          description: Server logging level response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoggingLevel"
        401:
          description: Invalid credential provided
      security:
        - basic: [ ]
    put:
      tags:
        - Logging
      summary: Change the server logging level.
      requestBody:
        $ref: "#/components/requestBodies/LoggingLevel"
      responses:
        200:
          description: Server log level response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoggingLevel"
        400:
          description: Invalid log level provided
        401:
          description: Invalid credential provided
      security:
        - basic: [ ]

components:
  schemas:
    LoggingLevel:
      type: object
      properties:
        level:
          type: string
          enum:
            - INFO
            - DEBUG
            - CRITICAL
            - ERROR
            - WARNING
          example: "INFO"
  requestBodies:
    LoggingLevel:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/LoggingLevel"
  securitySchemes:
    basic:
      type: http
      scheme: basic
      description: Basic HTTP authorization
